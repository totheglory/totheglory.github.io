<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>terrence mu&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-16T18:02:19.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>terrence mu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>paxos</title>
    <link href="http://yoursite.com/2016/10/17/paxos/"/>
    <id>http://yoursite.com/2016/10/17/paxos/</id>
    <published>2016-10-16T17:15:01.000Z</published>
    <updated>2016-10-16T18:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><p>Paxos算法是基于消息传递,具有高度容错特性的一致性算法，是当前解决分布式一致性问题最有效的算法之一。<br>该算法解决的问题就是如何在一个可能发生诸如机器宕机或网络异常等情况的分布式系统中，快速且正确的在集群内部对某个数据的值达成一致，并且保证不论发生以上任何异常都不会破坏整个系统的一致性。<br><br>paxos的三个角色Proposer,Acceptor,learner.<br><br>paxos算法大致分为两部分，提出提案和提案获取.<br><br>1.提出提案<br>(1) Proposer向acceptor的某个超过半数的子集成员发送编号为Mn的prepare请求。此时如果acceptor收到该编号为Mn的prepare请求,大于它所有当前已经响应的请求编号，那么它就会将已经批准过的最大编号的提案作为响应反馈给Proposer，并且承诺不会再批准任何小于Mn编号的提案。<br>(2) 如果Proposer收到来自半数以上的Acceptor反馈的，编号Mn的Prepare请求响应，那么它就会发送一个针对Mn的值为vn的Accept请求给Acceptor。如果acceptor收到这个针对Mn编号值为Vn的提案，且它尚未对大于编号Mn的Prepare请求作出响应，它就可以通过该提案。<br>注意：为保证防止死循环,proposer选取一个主proposer。<br><br>2.提案的获取：<br>acceptor通过后通知learner集合，learner集合再负责通知其余的learner。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Paxos算法&quot;&gt;&lt;a href=&quot;#Paxos算法&quot; class=&quot;headerlink&quot; title=&quot;Paxos算法&quot;&gt;&lt;/a&gt;Paxos算法&lt;/h3&gt;&lt;p&gt;Paxos算法是基于消息传递,具有高度容错特性的一致性算法，是当前解决分布式一致性问题最有效的算法之
    
    </summary>
    
    
      <category term="paxos,分布式" scheme="http://yoursite.com/tags/paxos-%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
